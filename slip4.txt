Using node js create an eLearning System
// app.js

const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 3000;

// Connect to MongoDB database
mongoose.connect('mongodb://localhost/elearning', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true,
});

// Define User schema
const userSchema = new mongoose.Schema({
  username: { type: String, unique: true },
  email: { type: String, unique: true },
  password: String,
});

const User = mongoose.model('User', userSchema);

// Middleware for parsing JSON requests
app.use(express.json());

// User registration endpoint
app.post('/register', async (req, res) => {
  try {
    const { username, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, email, password: hashedPassword });
    await user.save();
    res.status(201).send('User registered successfully');
  } catch (error) {
    console.error(error);
    res.status(500).send('An error occurred');
  }
});

// User login endpoint
app.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(401).send('Invalid username or password');
    }
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).send('Invalid username or password');
    }
    const token = jwt.sign({ userId: user._id }, 'secret');
    res.send({ token });
  } catch (error) {
    console.error(error);
    res.status(500).send('An error occurred');
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});


Create an HTML form using AngularJS that contain the Student Registration details and
validate Student first and last name as it should not contain other than alphabets and age should
be between 18 to 50 and display greeting message depending on current time using ng-show
(e.g. Good Morning, Good Afternoon, etc.)(Use AJAX).
<!DOCTYPE html>
<html ng-app="studentRegistrationApp">
<head>
  <title>Student Registration Form</title>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>
<body ng-controller="StudentRegistrationController">
  <h2>Student Registration Form</h2>

  <form name="registrationForm" ng-submit="submitForm()">
    <div>
      <label for="firstName">First Name:</label>
      <input type="text" id="firstName" name="firstName" ng-model="student.firstName" required pattern="[a-zA-Z]+" title="First name should contain only alphabets">
      <span ng-show="registrationForm.firstName.$dirty && registrationForm.firstName.$error.required">First name is required.</span>
      <span ng-show="registrationForm.firstName.$dirty && registrationForm.firstName.$error.pattern">First name should contain only alphabets.</span>
    </div>
    <div>
      <label for="lastName">Last Name:</label>
      <input type="text" id="lastName" name="lastName" ng-model="student.lastName" required pattern="[a-zA-Z]+" title="Last name should contain only alphabets">
      <span ng-show="registrationForm.lastName.$dirty && registrationForm.lastName.$error.required">Last name is required.</span>
      <span ng-show="registrationForm.lastName.$dirty && registrationForm.lastName.$error.pattern">Last name should contain only alphabets.</span>
    </div>
    <div>
      <label for="age">Age:</label>
      <input type="number" id="age" name="age" ng-model="student.age" required min="18" max="50">
      <span ng-show="registrationForm.age.$dirty && registrationForm.age.$error.required">Age is required.</span>
      <span ng-show="registrationForm.age.$dirty && (registrationForm.age.$error.min || registrationForm.age.$error.max)">Age should be between 18 and 50.</span>
    </div>
    <button type="submit" ng-disabled="registrationForm.$invalid">Register</button>
  </form>

  <div ng-show="showGreetingMessage">
    <h3>{{ greetingMessage }}</h3>
  </div>

  <script>
    var app = angular.module('studentRegistrationApp', []);

    app.controller('StudentRegistrationController', function($scope, $http) {
      $scope.student = {};

      $scope.submitForm = function() {
        // Simulated AJAX request (replace with actual AJAX call to backend)
        $http.post('/api/register', $scope.student)
          .then(function(response) {
            console.log(response.data);
          })
          .catch(function(error) {
            console.error('Error:', error);
          });

        // Determine greeting message based on current time
        var currentTime = new Date().getHours();
        if (currentTime < 12) {
          $scope.greetingMessage = 'Good Morning!';
        } else if (currentTime < 18) {
          $scope.greetingMessage = 'Good Afternoon!';
        } else {
          $scope.greetingMessage = 'Good Evening!';
        }

        $scope.showGreetingMessage = true;
      };
    });
  </script>
</body>
</html>


